[supported_formats]
types = ['dataframe', 'text', 'array', 'null']


[text]
model = ['CountVectorizer', 'LatentDirichletAllocation']
corpus = 'minipedia'
corpus_config = None

[CountVectorizer]
stop_words = 'english'
lowercase = True
max_df = 0.25
min_df = 0.1
strip_accents = 'unicode'

[HashingVectorizer]
stop_words = 'english'
lowercase = True
max_df = 0.25
min_df = 0.1
strip_accents = 'unicode'

[TfidfTransformer]
norm = 'l2'
use_idf = True
smooth_idf = True
sublinear_tf = False

[TfidfVectorizer]
stop_words = 'english'
lowercase = True
max_df = 0.25
min_df = 0.1
strip_accents = 'unicode'

[DictionaryLearning]
n_components = 50

[FactorAnalysis]
n_components = 50

[FastICA]
n_components = 50

[IncrementalPCA]
n_components = 50

[KernelPCA]
n_components = 50

[LatentDirichletAllocation]
n_components = 50
learning_method = 'online'

[MiniBatchDictionaryLearning]
n_components = 50

[MiniBatchSparsePCA]
n_components = 50

[NMF]
n_components = 50

[PCA]
n_components = 50

[SparsePCA]
n_components = 50

[TruncatedSVD]
n_components = 50

[BytePairEmbeddings]
__model = 'en'

[ELMoEmbeddings]
__model = 'original'

[FlairEmbeddings]
__model = 'mix-forward'

[PooledFlairEmbeddings]
__model = 'mix-forward'

[TransformerWordEmbeddings]
__model = 'en'

[WordEmbeddings]
__model = 'en'

[StackedEmbeddings]
__model = [embeddings.WordEmbeddings('glove'), embeddings.FlairEmbeddings('mix-forward'), embeddings.FlairEmbeddings('mix-backward')]

[DocumentPoolEmbeddings]
__model = [embeddings.WordEmbeddings('glove')]

[DocumentRNNEmbeddings]
__model = [embeddings.WordEmbeddings('glove')]

[TransformerDocumentEmbeddings]
__model = 'bert-base-uncased'

[SentenceTransformerDocumentEmbeddings]
__model = 'stsb-mpnet-base-v2'

[impute]
model = 'IterativeImputer'

[SimpleImputer]
missing_values = np.nan
strategy = 'mean'

[IterativeImputer]
missing_values = np.nan
initial_strategy = 'mean'

[KNNImputer]
missing_values = np.nan
weights = 'distance'

[interpolate]
method = 'linear'
limit_direction = 'both'

[data]
homedir = os.getenv('HOME')
datadir = os.path.join(%(homedir)s, '.datawrangler', 'data', '')